#1

# Получить число для дня недели.
day = int(input('Введите число (1-7) для дня недели: '))

# Определить название дня недели и показать его.
if day == 1:
    print('Понедельник')
elif day == 2:
    print('Вторник')
elif day == 3:
    print('Среда')
elif day == 4:
    print ('Четверг')
elif day == 5:
    print ('Пятница')
elif day == 6:
    print ('Суббота')
elif day == 7:
    print ('Воскресенье')
else:
    print ('Ошибка: пожалуйста, введите число в диапазоне между 1 и 7.')


#2

# Локальные переменные
lengthA = 0.0
widthA = 0.0
areaA = 0.0
lengthB = 0.0
widthB = 0.0
areaB = 0.0

# Получить длину A
lengthA = float(input('Введите длину A: '))

# Получить ширину A
widthA = float(input('Введите ширину A: '))

# Получить длину B
lengthB = float(input('Введите длину B: '))

# Получить ширину B
widthB = float(input('Введите ширину B: '))

# Вычислить площадь A
areaA = lengthA * widthA

# Вычислить площадь B
areaB = lengthB * widthB

# Напечатать сравнение площадей
print ('Площадь A:', format(areaA, '.2f'))
print ('Площадь B:', format(areaB, '.2f'))
if  areaA > areaB:
    print ('Площадь A больше площади B.')
elif  areaA < areaB:
    print ('Площадь B больше площади A.')
else:
    print ('Площадь A равна площади B.')

#3

# Получить возвраст человека.
age = int(input('Введите возраст: '))

# Определить, является ли этот человек младенцем, ребенком,
# подростком или взрослым, и показать результат.
if age <= 1:
    print('Младенец')
elif age > 1 and age < 13:
    print('Ребенок')
elif age > 13 and age < 20:
    print('Подросток')
else:
    print ('Взрослый')

#4

# Получить число
number = int(input('Введите целое число между 1 и 10: '))

# Напечатать римскую цифру
if number == 1:
    print ('I')
elif number == 2:
    print ('II')
elif number == 3:
    print ('III')
elif number == 4:
    print ('IV')
elif number == 5:
    print ('V')
elif number == 6:
    print ('VI')
elif number == 7:
    print ('VII')
elif number == 8:
    print ('VIII')
elif number == 9:
    print ('IX')
elif number == 10:
    print ('X')
else:
    print ('Ошибка: недопустимое число')

#5

# Глобальные константы
MASS_MULTIPLIER = 9.8
TOO_HEAVY = 500.0
TOO_LIGHT = 100.0

# Локальные переменные
weight = 0.0
mass = 0.0

# Получить массу
mass = float(input("Введите массу тела в килограммах: "))

# Вычислить вес
weight = mass * MASS_MULTIPLIER

# Показать расчет веса
print ('Вес объекта: ', format(weight, '.2f'))
if weight > TOO_HEAVY:
    print ('Объект слишком тяжелый. Он весит более',
           TOO_HEAVY, 'ньютонов.')
elif  weight < TOO_LIGHT:
    print ('Объект слишком легкий. Он весит менее',
           TOO_LIGHT, 'ньютонов.')

#6

# Получить день
day = int(input('Введите день месяца: '))

# Получить месяц
month = int(input('Введите месяц в числовой форме: '))

# Получить год
year = int(input('Введите год в числовой форме: '))

# Проверить, введен ли допустимый день
if day > 31 or day < 1:
    print('Ошибка: введен недопустимый день')

# Проверить, введен ли допустимый месяц
elif month > 12 or month < 1:
    print('Ошибка: введен недопустимый месяц')

# Проверить, введен ли допустимый год
elif year > 99 or year < 0:
    print('Ошибка: введен недопустимый год')

# Введенные данные допустимы
else:
    # Показать расчет магической даты
    print('Введена дата ', day, '/', month, '/', year)
    if (day * month) == year:
        print('Это магическая дата.')
    else:
        print('Это не магическая дата.')

#7

# Глобальные переменные
RED = "красный"
BLUE = "синий"
YELLOW = "желтый"

# Получить от пользователя первый цвет.
color1 = input('Введите первый основной цвет буквами в нижнем регистре: ')

# Получить от пользователя второй цвет.
color2 = input('Введите второй основной цвет буквами в нижнем регистре: ')

# Проверить допустимость первого цвета.
if color1 != RED and color1 != BLUE and color1 != YELLOW:
    print('Ошибка: первый введенный цвет недопустимый.')

# Проверить допустимость второго цвета.
elif color2 != RED and color2 != BLUE and color2 != YELLOW:
    print('Ошибка: второй введенный цвет недопустимый.')

# Проверить, не являются ли цвета одинаковыми.
elif color1 == color2:
    print('Ошибка: два введенных цвета одинаковые.')

# Показать вторичный цвет, получающийся путем смешивания двух цветов.
else:
    # Определить вторичный цвет, если первый цвет красный.
    if color1 == RED:
        if color2 == BLUE:
            print('фиолетовый')
        else: # Цвет 2 должен быть желтым
            print('оранжевый')

    # Определить вторичный цвет, если первый цвет синий.
    elif color1 == BLUE:
        if color2 == RED:
            print('фиолетовый')
        else: # Цвет 2 должен быть желтым.
            print('зеленый')

    else: # Цвет 1 должен быть желтым.
        if color2 == RED:
            print('оранжевый')
        else: # Цвет 2 должен быть синим.
            print('зеленый')

#8

# Глобальные переменные
HOT_DOGS_PER_PACKAGE = 10  # количество сосисок в упаковке
BUNS_PER_PACKAGE = 8  # количество булочек в упаковке

# Локальные переменные
numAttending = 0  # Количество участников пикника
numPerPerson = 0  # Количество сосисок и булочек в расчете на человека
total = 0  # Общее количество требующихся сосисок и булочек
minDogs = 0  # Минимальное количество упаковок сосисок
minBuns = 0  # TМинимальное количество упаковок булочек
dogsLeft = 0  # Количество сосисок, оставшихся в упаковке
bunsLeft = 0  # Количество булочек, оставшихся в упаковке

# Получить от пользователя количество людей, посещающих пикник.
numAttending = int(input('Введите количество людей, посещающих пикник: '))

# Получить от пользователя количество хот-догов в расчете на участника.
numPerPerson = int(input('Введите количество хот-догов в расчете на человека: '))

# Вычислить общее количество требующихся сосисок и булочек.
total = numAttending * numPerPerson

# Вычислить минимальное количество требующихся упаковок с сосисками.
minDogs = total // HOT_DOGS_PER_PACKAGE

# Определить, является ли количество посещающих людей
# достаточно большим, что требуется более одной упаковки
# сосисок.
if minDogs > 0:
    # Вычислить количество сосисок, оставшихся
    # в упаковке, если есть.
    dogsLeft = total % HOT_DOGS_PER_PACKAGE

    # Если будут остатки, то добавить дополнительную
    # упаковку сосисок.
    if dogsLeft != 0:
        minDogs += 1

# Количество посещающих людей достаточно малое, и поэтому
# требуется только одна упаковка сосисок.
else:
    # Присвоить минимальному количеству упаковок сосисок значение 1.
    minDogs = 1

# Определить количество оставшихся сосисок, если есть.
dogsLeft = HOT_DOGS_PER_PACKAGE * minDogs - total

# Вычислить минимальное количество упаковок булочек,
# необходимых для хот-догов.
minBuns = total // BUNS_PER_PACKAGE

# Определить, является ли количество посещающих людей
# достаточно большим, что требуется более одной упаковки
# булочек для хот-догов.
if minBuns > 0:
    # Вычислить количество булочек для хот-догов, оставшихся
    # в упаковке, если есть.
    bunsLeft = total % BUNS_PER_PACKAGE

    # Если будут остатки, то добавить дополнительную
    # упаковку булочек для хот-догов.
    if bunsLeft != 0:
        minBuns += 1

# Количество посещающих людей достаточно малое, и поэтому
# требуется только одна упаковка булочек для хот-догов.
else:
    # Присвоить минимальному количеству упаковок булочек
    # для хот-догов значение 1.
    minBuns = 1

# Вычислить количество оставшихся булочек для хот-догов, если есть.
bunsLeft = BUNS_PER_PACKAGE * minBuns - total

# Показать минимальное количество требующихся упаковок сосисок.
print('Минимальное количество требующихся упаковок сосисок:', minDogs)

# Показать минимальное количество требующихся упаковок булочек.
print('Минимальное количество требующих упаковок булочек:', minBuns)

# Показать количество оставшихся сосисок.
print('Количество оставшихся сосисок:', dogsLeft)

# Показать количество оставшихся булочек для хот-догов.
print('Количество оставшихся булочек:', bunsLeft)